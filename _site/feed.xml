<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.0.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2016-12-04T14:22:37+08:00</updated><id>/</id><title>externIE</title><subtitle>externIE的个人博客</subtitle><entry><title>关于virtualenv的一些事</title><link href="/Virtualenv/" rel="alternate" type="text/html" title="关于virtualenv的一些事" /><published>2016-12-04T00:00:00+08:00</published><updated>2016-12-04T00:00:00+08:00</updated><id>/Virtualenv</id><content type="html" xml:base="/Virtualenv/">&lt;h2 id=&quot;virtualenv-&quot;&gt;virtualenv 的概述&lt;/h2&gt;
&lt;p&gt;由于python包的繁多，每个包的版本之间存在不兼容，包括py2.x和3.x也存在不兼容现象。如果我们同时在开发多个py应用的时候可能就会产生这样一个尴尬的现象：
你的工程A需要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;某包2.x&lt;/code&gt;而你的工程B需要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;某包3.x&lt;/code&gt;，这两个版本之由于不兼容你需要不断的在开发过程中来回切换，是不是很麻烦呢。
virtualenv的作用就在于给你的每一个python程序提供了一个沙盒式的运行环境，简单的说你可以为你的某个python程序提供一个特殊的python环境。
你不仅可以拥有一份独立的lib库，还可以拥有一个独立的解释器interpreter，也就是说你可以在工程A中使用py2.7，在工程B中使用py2.8。&lt;/p&gt;

&lt;h2 id=&quot;virtualenv&quot;&gt;安装virtualenv&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upgrade&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtualenv&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;strong&gt;注意!&lt;/strong&gt; 在macOS 10.12和10.11下你可能得先关闭rootless功能，并且使用下面命令&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upgrade&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtualenv&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section&quot;&gt;创建沙盒虚拟环境&lt;/h2&gt;
&lt;p&gt;cd 到你想放置虚拟环境的目录，在终端中输入下面命令&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;virtualenv&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;env&lt;/code&gt;是你建的虚拟环境的名字，在当前目录下你会发现virtualenv帮你建了一个venv的目录，事实上这个就是你的虚拟环境。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;进入创建好的虚拟环境&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;进入成功后终端的前缀就是你现在所使用的那一份虚拟环境&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;退出当前虚拟环境&lt;/h2&gt;
&lt;p&gt;在当前环境下输入&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;deactivate&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-3&quot;&gt;删除虚拟环境&lt;/h2&gt;
&lt;p&gt;直接把你所建的虚拟环境对应的文件夹删除就好了&lt;/p&gt;</content><category term="python" /><category term="virtualenv" /><summary>关于virtualenv看这篇就够了</summary></entry><entry><title>关于Django-Settings.py的一些事</title><link href="/AboutDjangoSettings/" rel="alternate" type="text/html" title="关于Django-Settings.py的一些事" /><published>2016-11-29T00:00:00+08:00</published><updated>2016-11-29T00:00:00+08:00</updated><id>/AboutDjangoSettings</id><content type="html" xml:base="/AboutDjangoSettings/">&lt;h2 id=&quot;django-settings-&quot;&gt;Django settings 概述&lt;/h2&gt;
&lt;p&gt;Django settings是个神奇的py文件，它包含了整个django站点的相关设置，其可选项是很多的，采用import * 覆写的方式，配置属于自己的站点，也就是说其实django本来就已经管理有一份默认的settings配置。
这份文件基本上决定了你的服务器是否要输出调试信息，采用什么数据库，站点内都有什么app，有什么中间件，你也可以自定义一些字段，以便全站使用。所以这分文件是及其重要的，也是及其私密的，不可随意公开。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;一些基本知识&lt;/h2&gt;
&lt;p&gt;settings文件其实就是一个python带模块级别变量的模块罢了。
下面是一些常见的配置：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;www.externie.com&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DEBUG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DEFAULT_FROM_EMAIL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;xxx@163.com&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p class=&quot;notice&quot;&gt;&lt;strong&gt;注意!&lt;/strong&gt; 如果DEBUG==False那么ALLOWE_HOSTS就一定要有值，不能是空数组&lt;/p&gt;
&lt;p&gt;由于settings文件其实是个python模块，所以它也具备python模块的一些特性：
* 不能有python语法错误
* 可以用正确的python语句给settings动态赋值，如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;MY_SETTING&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;你也可以从其它的settings文件中导入（import）一些变量&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;settings&quot;&gt;指定使用哪份settings文件&lt;/h2&gt;
&lt;p&gt;### DJANGO_SETTINGS_MODULE
当你在用django的时候，你必须告诉django你需要用的settings文件。这时候就需要用上&lt;code class=&quot;highlighter-rouge&quot;&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;这个环境变量。&lt;/p&gt;

&lt;p&gt;DJANGO_SETTINGS_MODULE需要用python的点路径，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;e.g.mysite.settings&lt;/code&gt;。当然了settings这个文件必须在python的搜索路径下，换句话说就是sys.path数组中一定要有你要用的settings模块的路径。&lt;/p&gt;

&lt;h3 id=&quot;django-admin&quot;&gt;django-admin&lt;/h3&gt;
&lt;p&gt;当你在用django-admin的时候，你也可以只设置一次&lt;code class=&quot;highlighter-rouge&quot;&gt;DJANGO_SETTINGS_MODULE&lt;/code&gt;就可以了，之后你的每次运行，django-admin都会使用你所设置的settings文件。&lt;/p&gt;

&lt;p&gt;例子（类Unix）：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DJANGO_SETTINGS_MODULE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;django&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runserver&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;例子（windows）：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DJANGO_SETTINGS_MODULE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mysite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;django&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runserver&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;当然你也可以用–settings命令行来指定当前需要的特定的settings文件，如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;django&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;admin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runserver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mysite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;section-1&quot;&gt;动态指定&lt;/h3&gt;
&lt;p&gt;在你的动态服务器环境下，你需要告诉WSGI应用当前用的是那一份settings文件，你可以这么做：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&#39;DJANGO_SETTINGS_MODULE&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&#39;mysite.settings&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/modwsgi/&quot;&gt;关于Django mod_wsgi的文档&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;settings-1&quot;&gt;默认的settings文件&lt;/h2&gt;
&lt;p class=&quot;notice&quot;&gt;一份settings文件中的一些字段如果你不需要配置的，你完全可以不写出来，因为django会有一份默认的settings文件，它包含了一些默认值，如果你没有重写这些字段的话就会是默认值。
这份更加神奇的settings文件在django/conf/global_settings.py 
** 关于settings的“继承机制”：
* 先从global_settings.py中加载所有配置
* 再加载你指定的settings文件，并根据你的settings中的内容覆盖global_settings中的一些字段
&lt;strong&gt;注意!&lt;/strong&gt; 你并不需要在自己的settings文件中import global_settings，django已经帮你做好了&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;未完待续。。。。&lt;/h2&gt;</content><category term="python" /><category term="django" /><category term="settings" /><summary>关于Django-Settings看这篇就够了</summary></entry></feed>
